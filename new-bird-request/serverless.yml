service: new-bird-request

plugins:
  - serverless-offline
  - serverless-pseudo-parameters

custom:
  topic: NEW_BIRD_REQ
  stage: ${opt:stage, self:provider.stage}
  # config: ${file(env-${self:custom.stage}.yml)}

provider:
  name: aws
  runtime: nodejs8.10
  region: ap-southeast-2
  stage: dev
  environment:
    TOPIC_ARN: 'arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.topic}'
  iamRoleStatements:
    - Effect: "Allow"
      Resource: "*"
      Action:
        - "sns:*"

functions:
  requestNewBird:
    handler: requestNewBird.requestNewBird
    events:
      - http:
          path: new-bird-request
          method: post
          cors: true

  getNewBirdRequest:
    handler: getNewBirdRequest.getNewBirdRequest
    events:
      - http:
          path: new-bird-requests
          method: get
          cors: true

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:custom.topic}-QUEUE

    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: SNS Topic
        TopicName: ${self:custom.topic}

    SQSQueuePolicy:
      Type: AWS::SQS::QueuePolicy
      Properties:
        PolicyDocument:
          Id: SQSQueuePolicy
          Statement:
          - Sid: Allow-SendMessage-To-Both-Queues-From-SNS-Topic
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
            - sqs:SendMessage
            Resource: "*"
            Condition:
              ArnEquals:
                aws:SourceArn:
                  Ref: SNSTopic
        Queues:
        - Ref: SQSQueue

    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
          Endpoint:
            Fn::GetAtt:
              - SQSQueue
              - Arn
          Protocol: sqs
          TopicArn: 'arn:aws:sns:${self:provider.region}:#{AWS::AccountId}:${self:custom.topic}'
